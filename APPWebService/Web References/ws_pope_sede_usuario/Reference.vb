'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
'
Namespace ws_pope_sede_usuario
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="UsuarioSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Usuario
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private HelloWorldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CantidadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ListaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ListarxLicenciaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ListarxLicenciav2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CambiarClaveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CambiarClaveCifradoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CrearUsuarioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.APPWebService.My.MySettings.Default.APPWebService_ws_pope_sede_usuario_Usuario
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event HelloWorldCompleted As HelloWorldCompletedEventHandler
        
        '''<remarks/>
        Public Event CantidadCompleted As CantidadCompletedEventHandler
        
        '''<remarks/>
        Public Event ListaCompleted As ListaCompletedEventHandler
        
        '''<remarks/>
        Public Event ListarxLicenciaCompleted As ListarxLicenciaCompletedEventHandler
        
        '''<remarks/>
        Public Event ListarxLicenciav2Completed As ListarxLicenciav2CompletedEventHandler
        
        '''<remarks/>
        Public Event CambiarClaveCompleted As CambiarClaveCompletedEventHandler
        
        '''<remarks/>
        Public Event CambiarClaveCifradoCompleted As CambiarClaveCifradoCompletedEventHandler
        
        '''<remarks/>
        Public Event CrearUsuarioCompleted As CrearUsuarioCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync()
            Me.HelloWorldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync(ByVal userState As Object)
            If (Me.HelloWorldOperationCompleted Is Nothing) Then
                Me.HelloWorldOperationCompleted = AddressOf Me.OnHelloWorldOperationCompleted
            End If
            Me.InvokeAsync("HelloWorld", New Object(-1) {}, Me.HelloWorldOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloWorldOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloWorldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloWorldCompleted(Me, New HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Cantidad", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Cantidad() As Integer
            Dim results() As Object = Me.Invoke("Cantidad", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CantidadAsync()
            Me.CantidadAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CantidadAsync(ByVal userState As Object)
            If (Me.CantidadOperationCompleted Is Nothing) Then
                Me.CantidadOperationCompleted = AddressOf Me.OnCantidadOperationCompleted
            End If
            Me.InvokeAsync("Cantidad", New Object(-1) {}, Me.CantidadOperationCompleted, userState)
        End Sub
        
        Private Sub OnCantidadOperationCompleted(ByVal arg As Object)
            If (Not (Me.CantidadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CantidadCompleted(Me, New CantidadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Lista", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Lista() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Lista", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListaAsync()
            Me.ListaAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListaAsync(ByVal userState As Object)
            If (Me.ListaOperationCompleted Is Nothing) Then
                Me.ListaOperationCompleted = AddressOf Me.OnListaOperationCompleted
            End If
            Me.InvokeAsync("Lista", New Object(-1) {}, Me.ListaOperationCompleted, userState)
        End Sub
        
        Private Sub OnListaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ListaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListaCompleted(Me, New ListaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListarxLicencia", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ListarxLicencia(ByVal LicenciaID As Short) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ListarxLicencia", New Object() {LicenciaID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListarxLicenciaAsync(ByVal LicenciaID As Short)
            Me.ListarxLicenciaAsync(LicenciaID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListarxLicenciaAsync(ByVal LicenciaID As Short, ByVal userState As Object)
            If (Me.ListarxLicenciaOperationCompleted Is Nothing) Then
                Me.ListarxLicenciaOperationCompleted = AddressOf Me.OnListarxLicenciaOperationCompleted
            End If
            Me.InvokeAsync("ListarxLicencia", New Object() {LicenciaID}, Me.ListarxLicenciaOperationCompleted, userState)
        End Sub
        
        Private Sub OnListarxLicenciaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ListarxLicenciaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListarxLicenciaCompleted(Me, New ListarxLicenciaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListarxLicenciav2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ListarxLicenciav2(ByVal IDLicencia As Short, ByVal Fecha As Long, ByRef MensajeError As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ListarxLicenciav2", New Object() {IDLicencia, Fecha, MensajeError})
            MensajeError = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListarxLicenciav2Async(ByVal IDLicencia As Short, ByVal Fecha As Long, ByVal MensajeError As String)
            Me.ListarxLicenciav2Async(IDLicencia, Fecha, MensajeError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListarxLicenciav2Async(ByVal IDLicencia As Short, ByVal Fecha As Long, ByVal MensajeError As String, ByVal userState As Object)
            If (Me.ListarxLicenciav2OperationCompleted Is Nothing) Then
                Me.ListarxLicenciav2OperationCompleted = AddressOf Me.OnListarxLicenciav2OperationCompleted
            End If
            Me.InvokeAsync("ListarxLicenciav2", New Object() {IDLicencia, Fecha, MensajeError}, Me.ListarxLicenciav2OperationCompleted, userState)
        End Sub
        
        Private Sub OnListarxLicenciav2OperationCompleted(ByVal arg As Object)
            If (Not (Me.ListarxLicenciav2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListarxLicenciav2Completed(Me, New ListarxLicenciav2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CambiarClave", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CambiarClave(ByVal Codigo As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Contrasena() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ConfirmarContrasena() As Byte) As Integer
            Dim results() As Object = Me.Invoke("CambiarClave", New Object() {Codigo, Contrasena, ConfirmarContrasena})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CambiarClaveAsync(ByVal Codigo As Integer, ByVal Contrasena() As Byte, ByVal ConfirmarContrasena() As Byte)
            Me.CambiarClaveAsync(Codigo, Contrasena, ConfirmarContrasena, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CambiarClaveAsync(ByVal Codigo As Integer, ByVal Contrasena() As Byte, ByVal ConfirmarContrasena() As Byte, ByVal userState As Object)
            If (Me.CambiarClaveOperationCompleted Is Nothing) Then
                Me.CambiarClaveOperationCompleted = AddressOf Me.OnCambiarClaveOperationCompleted
            End If
            Me.InvokeAsync("CambiarClave", New Object() {Codigo, Contrasena, ConfirmarContrasena}, Me.CambiarClaveOperationCompleted, userState)
        End Sub
        
        Private Sub OnCambiarClaveOperationCompleted(ByVal arg As Object)
            If (Not (Me.CambiarClaveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CambiarClaveCompleted(Me, New CambiarClaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CambiarClaveCifrado", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CambiarClaveCifrado(ByVal Codigo As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Contrasena() As Byte) As Integer
            Dim results() As Object = Me.Invoke("CambiarClaveCifrado", New Object() {Codigo, Contrasena})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CambiarClaveCifradoAsync(ByVal Codigo As Integer, ByVal Contrasena() As Byte)
            Me.CambiarClaveCifradoAsync(Codigo, Contrasena, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CambiarClaveCifradoAsync(ByVal Codigo As Integer, ByVal Contrasena() As Byte, ByVal userState As Object)
            If (Me.CambiarClaveCifradoOperationCompleted Is Nothing) Then
                Me.CambiarClaveCifradoOperationCompleted = AddressOf Me.OnCambiarClaveCifradoOperationCompleted
            End If
            Me.InvokeAsync("CambiarClaveCifrado", New Object() {Codigo, Contrasena}, Me.CambiarClaveCifradoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCambiarClaveCifradoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CambiarClaveCifradoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CambiarClaveCifradoCompleted(Me, New CambiarClaveCifradoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CrearUsuario", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CrearUsuario(ByVal Codigo As Integer, ByVal UsuarioID_SIPGA As Integer, ByVal TrabajadorID As Integer, ByVal UsuarioLogin As String, ByVal TipoUsuario As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ContrasenaByte() As Byte, ByVal PrimerApellido As String, ByVal SegundoApellido As String, ByVal PreNombres As String, ByVal TipoDocumento As Integer, ByVal NumeroDocumento As String, ByVal DependenciaID As Integer, ByVal Cargo As String, ByVal AdminValidarPC As Boolean, ByVal Audit_UsuarioLogin As String) As String
            Dim results() As Object = Me.Invoke("CrearUsuario", New Object() {Codigo, UsuarioID_SIPGA, TrabajadorID, UsuarioLogin, TipoUsuario, ContrasenaByte, PrimerApellido, SegundoApellido, PreNombres, TipoDocumento, NumeroDocumento, DependenciaID, Cargo, AdminValidarPC, Audit_UsuarioLogin})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CrearUsuarioAsync(ByVal Codigo As Integer, ByVal UsuarioID_SIPGA As Integer, ByVal TrabajadorID As Integer, ByVal UsuarioLogin As String, ByVal TipoUsuario As Integer, ByVal ContrasenaByte() As Byte, ByVal PrimerApellido As String, ByVal SegundoApellido As String, ByVal PreNombres As String, ByVal TipoDocumento As Integer, ByVal NumeroDocumento As String, ByVal DependenciaID As Integer, ByVal Cargo As String, ByVal AdminValidarPC As Boolean, ByVal Audit_UsuarioLogin As String)
            Me.CrearUsuarioAsync(Codigo, UsuarioID_SIPGA, TrabajadorID, UsuarioLogin, TipoUsuario, ContrasenaByte, PrimerApellido, SegundoApellido, PreNombres, TipoDocumento, NumeroDocumento, DependenciaID, Cargo, AdminValidarPC, Audit_UsuarioLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CrearUsuarioAsync( _
                    ByVal Codigo As Integer,  _
                    ByVal UsuarioID_SIPGA As Integer,  _
                    ByVal TrabajadorID As Integer,  _
                    ByVal UsuarioLogin As String,  _
                    ByVal TipoUsuario As Integer,  _
                    ByVal ContrasenaByte() As Byte,  _
                    ByVal PrimerApellido As String,  _
                    ByVal SegundoApellido As String,  _
                    ByVal PreNombres As String,  _
                    ByVal TipoDocumento As Integer,  _
                    ByVal NumeroDocumento As String,  _
                    ByVal DependenciaID As Integer,  _
                    ByVal Cargo As String,  _
                    ByVal AdminValidarPC As Boolean,  _
                    ByVal Audit_UsuarioLogin As String,  _
                    ByVal userState As Object)
            If (Me.CrearUsuarioOperationCompleted Is Nothing) Then
                Me.CrearUsuarioOperationCompleted = AddressOf Me.OnCrearUsuarioOperationCompleted
            End If
            Me.InvokeAsync("CrearUsuario", New Object() {Codigo, UsuarioID_SIPGA, TrabajadorID, UsuarioLogin, TipoUsuario, ContrasenaByte, PrimerApellido, SegundoApellido, PreNombres, TipoDocumento, NumeroDocumento, DependenciaID, Cargo, AdminValidarPC, Audit_UsuarioLogin}, Me.CrearUsuarioOperationCompleted, userState)
        End Sub
        
        Private Sub OnCrearUsuarioOperationCompleted(ByVal arg As Object)
            If (Not (Me.CrearUsuarioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CrearUsuarioCompleted(Me, New CrearUsuarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub HelloWorldCompletedEventHandler(ByVal sender As Object, ByVal e As HelloWorldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloWorldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CantidadCompletedEventHandler(ByVal sender As Object, ByVal e As CantidadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CantidadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ListaCompletedEventHandler(ByVal sender As Object, ByVal e As ListaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ListarxLicenciaCompletedEventHandler(ByVal sender As Object, ByVal e As ListarxLicenciaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListarxLicenciaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ListarxLicenciav2CompletedEventHandler(ByVal sender As Object, ByVal e As ListarxLicenciav2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListarxLicenciav2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property MensajeError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CambiarClaveCompletedEventHandler(ByVal sender As Object, ByVal e As CambiarClaveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CambiarClaveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CambiarClaveCifradoCompletedEventHandler(ByVal sender As Object, ByVal e As CambiarClaveCifradoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CambiarClaveCifradoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CrearUsuarioCompletedEventHandler(ByVal sender As Object, ByVal e As CrearUsuarioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CrearUsuarioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
